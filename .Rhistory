data <- readRDS("./data/symlitrep_final_data.rds")
# $ study          : Factor w/ 3 levels --> Study1, Study2, Study3
# $ title          : Factor w/ 3 levels --> Name/Theme of the Study
# $ condition      : Factor w/ 12 levels --> Name of the condition i.e. experimental manipulation
# $ cond           : Factor w/ 12 levels --> Name of the condition in short form
# $ subid          : Factor w/ 364 levels --> Subjet ID
# $ sex            : Factor w/ 2 levels "0","1": --> Participants' sex; 1 = male
# $ agey           : num [1:7146] total age in years
# $ agem           : num [1:7146] total age in months
# $ aged           : num [1:7146] total age in days
# $ valid          : Factor w/ 3 levels --> Status of Participants
# "valid"= main sample
# "drop" = excluded participants
# "oversampling" = data collected after reaching the minimum of 96 participants per study
# $ drop           : Factor w/ 7 levels "fail_in_fam",..: --> Reasons for Participant exclusions
# fail_in_fam  --> did not meet criterion in familiarisation phase
# fussy_child  --> child was fussy or uncooperative, lost interest in participating
# language     --> child did not understand instructions due to not speaking German fluently enough
# oversampling --> Not a drop per se: participants tested after reaching minimum of participants
# quit_early   --> Children that quit early and did not contribute at least 8 test trials
# technical    --> technical problems; i.e. script for presenting experiment crashed
# $ trial          : Factor w/ 17 levels NUmbers 1-16 for test trials; "fam" for familiarisation trials
# $ correct        : int [1:7146] correct choice = 1; incorrect = 0
# $ rt             : int [1:7146] reaction time in ms
# $ experimenter   : Factor w/ 6 levels --> ID of the experimenter; E1 - E6
# $ where          : Factor w/ 4 levels
# afterschoolcenter --> after school care; testing in the early afternoon
# daycare --> testing in kindergartens, prior to lunch
# home --> testing during visits at home; usually in the afternoon
# lab --> children were tested when visiting the lab; usually in the afternoon
# $ eselectfam     : Factor w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during familiarisation traisl
# $ eselectmain    : Factor w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during test trails
# $ leftObject     : Factor w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the left side of the screen as target/distractor
# $ rightObject    : Factor w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the right side of the screen as target/distractor
# $ cue            : Factor w/ 98 levels "abpo_cue_1_A.png"
# --> stimulus item displayed in the middle of the screen as a cue
# $ target_position: Factor w/ 2 levels "left","right":
# side on which the target (i.e. correct choice) was presented
# $ item           : Factor w/ 4 levels "1","2","3","4":
# number of stimulus item in the respective condition
# $ target_shape   : Factor w/ 2 levels "A","B":
# target stimulus shape in the respective condition
# $ pick           : Factor w/ 2 levels "
# side of children's choice (left/right)
data <- readRDS("./data/symlitrep_final_data.rds")
age.table.data  <- data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop") %>%  # filter out dropped participants
group_by(study) %>%
summarize(
N = length(id),
female = sum(sex=="female"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
SD = round(sd(agem), 2))
age.table.data  <- data %>%
distinct(id, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop") %>%  # filter out dropped participants
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
SD = round(sd(agem), 2))
age.table.data  <- data %>%
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop") %>%  # filter out dropped participants
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
SD = round(sd(agem), 2))
View(age.table.data)
drop.table.data  <- data %>%
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid == "drop") %>%  # filter out dropped participants
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
SD = round(sd(agem), 2))
View(drop.table.data)
# convert first column into row names
age.table.data <- data.frame(age.table.data, row.names = "study")
83/12
12*6
12*7
rep.data <- readRDS("./data/symlitrep_final_data.rds")
rep.data <- readRDS("./data/symlitrep_final_data.rds")
rep.age.table.data  <- rep.data %>%
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop") %>%  # filter out dropped participants
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
SD = round(sd(agem), 2))
#
library("papaja")
r_refs("library.bib")
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
# General
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, Cohen's D
if (!require(ggthemes)) install.packages('ggthemes'); library(ggthemes) # for tufte boxplots
# bayes packages
if (!require(brms)) install.packages('brms'); library(brms) #
if (!require(tidybayes)) install.packages('tidybayes'); library(tidybayes) #
if (!require(HDInterval)) install.packages('HDInterval'); library(HDInterval) #
# Troubleshooting Knitting Document
# might be required for knitting manuscript
# install.packages('tinytex')
# tinytex::install_tinytex()
#
# tinytex::tlmgr_update()
# tinytex::reinstall_tinytex()
# Full data set including all participants (i.e. including dropped participants)
rep.data <- readRDS("./data/symlitrep_final_data.rds")
# $ study          : Factor w/ 3 levels --> Study1, Study2, Study3
# $ title          : Factor w/ 3 levels --> Name/Theme of the Study
# $ condition      : Factor w/ 12 levels --> Name of the condition i.e. experimental manipulation
# $ cond           : Factor w/ 12 levels --> Name of the condition in short form
# $ subid          : Factor w/ 364 levels --> Subjet ID
# $ sex            : Factor w/ 2 levels "0","1": --> Participants' sex; 1 = male
# $ agey           : num [1:7146] total age in years
# $ agem           : num [1:7146] total age in months
# $ aged           : num [1:7146] total age in days
# $ valid          : Factor w/ 3 levels --> Status of Participants
# "valid"= main sample
# "drop" = excluded participants
# "oversampling" = data collected after reaching the minimum of 96 participants per study
# $ drop           : Factor w/ 7 levels "fail_in_fam",..: --> Reasons for Participant exclusions
# fail_in_fam  --> did not meet criterion in familiarisation phase
# fussy_child  --> child was fussy or uncooperative, lost interest in participating
# language     --> child did not understand instructions due to not speaking German fluently enough
# oversampling --> Not a drop per se: participants tested after reaching minimum of participants
# quit_early   --> Children that quit early and did not contribute at least 8 test trials
# technical    --> technical problems; i.e. script for presenting experiment crashed
# $ trial          : Factor w/ 17 levels NUmbers 1-16 for test trials; "fam" for familiarisation trials
# $ correct        : int [1:7146] correct choice = 1; incorrect = 0
# $ rt             : int [1:7146] reaction time in ms
# $ experimenter   : Factor w/ 6 levels --> ID of the experimenter; E1 - E6
# $ where          : Factor w/ 4 levels
# afterschoolcenter --> after school care; testing in the early afternoon
# daycare --> testing in kindergartens, prior to lunch
# home --> testing during visits at home; usually in the afternoon
# lab --> children were tested when visiting the lab; usually in the afternoon
# $ eselectfam     : Factor w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during familiarisation traisl
# $ eselectmain    : Factor w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during test trails
# $ leftObject     : Factor w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the left side of the screen as target/distractor
# $ rightObject    : Factor w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the right side of the screen as target/distractor
# $ cue            : Factor w/ 98 levels "abpo_cue_1_A.png"
# --> stimulus item displayed in the middle of the screen as a cue
# $ target_position: Factor w/ 2 levels "left","right":
# side on which the target (i.e. correct choice) was presented
# $ item           : Factor w/ 4 levels "1","2","3","4":
# number of stimulus item in the respective condition
# $ target_shape   : Factor w/ 2 levels "A","B":
# target stimulus shape in the respective condition
# $ pick           : Factor w/ 2 levels "
# side of children's choice (left/right)
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop" & trial != "NA" & study == "study1") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(trial),
z.age = aged - mean(aged),
z.sex = scale(as.numeric(sex)))
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam")
View(rep.S1.bayes.data)
# prepare data
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam") %>%
sum(is.na(rep.S1.bayes.data$trial))
sum(is.na(rep.S1.bayes.data$trial))
# prepare data
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
z.age = aged - mean(aged),
z.sex = scale(as.numeric(sex)))
str(rep.S1.bayes.data)
sapply(rep.S1.bayes.data, function(x) sum(is.na(x)))
# prepare data
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
z.age = aged - mean(aged),
z.sex = scale(as.numeric(sex)))
# # clean data set?
# str(rep.S1.bayes.data)
# sapply(rep.S1.bayes.data, function(x) sum(is.na(x)))
S1.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data=S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S1.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data= rep.S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S1.full.bm <- add_criterion(S1.full.bm, c("loo", "waic"))
saveRDS(S1.full.bm, "./models/S1.full.bm.rds")
# load model from rds
S1.full.bm <- readRDS("./models/S1.full.bm.rds")
table(rep.S1.bayes.data$condition)
nd1 <- tibble(z.age = rep(seq(from = min(rep.S1.bayes.data$z.age), to = max(S1.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Representation",50),
rep("Pars Pro Toto",50),
rep("Complex Form Analogy",50),
rep("Simple Form Analogy",50)),
# the four conditions in the data
z.sex = rep(0,200),
z.trial = rep(0,200))
nd1 <- tibble(z.age = rep(seq(from = min(rep.S1.bayes.data$z.age), to = max(rep.S1.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Representation",50),
rep("Pars Pro Toto",50),
rep("Complex Form Analogy",50),
rep("Simple Form Analogy",50)),
# the four conditions in the data
z.sex = rep(0,200),
z.trial = rep(0,200))
# here we generate the fitted values based on the model
# the function fitted() takes in the model and the new dataset and generates a fitted values (inclucing upper and lower 95% CI) for every row in the dataset
# because our dataset ranges from min age to max age in the data, we get the prediction for the age range in the data
# but we could also generate predictions for different ages of course
f1 <- fitted(S1.full.bm,
newdata = nd1,
re_formula = NA) %>%
# this tells the function to ignore the random effects - in theory, we could generate predictions for specific individuals
as_tibble() %>%
bind_cols(nd1)%>%
mutate(age = z.age + mean(S1.bayes.data$aged)) # convert age back to the original scale by adding the mean of the data
# here we generate the fitted values based on the model
# the function fitted() takes in the model and the new dataset and generates a fitted values (inclucing upper and lower 95% CI) for every row in the dataset
# because our dataset ranges from min age to max age in the data, we get the prediction for the age range in the data
# but we could also generate predictions for different ages of course
f1 <- fitted(S1.full.bm,
newdata = nd1,
re_formula = NA) %>%
# this tells the function to ignore the random effects - in theory, we could generate predictions for specific individuals
as_tibble() %>%
bind_cols(nd1)%>%
mutate(age = z.age + mean(rep.S1.bayes.data$aged)) # convert age back to the original scale by adding the mean of the data
d1 <- rep.S1.bayes.data%>%
group_by(subid, aged, condition)%>%
summarise(mean = mean(correct))
# summarize the data to include them in the plot later on
d1 <- rep.S1.bayes.data%>%
group_by(subid, aged, condition)%>%
summarise(mean = mean(correct)) %>%
ungroup()
# load model from rds
S1.full.bm <- readRDS("./models/S1.full.bm.rds")
# table(rep.S1.bayes.data$condition)
nd1 <- tibble(z.age = rep(seq(from = min(rep.S1.bayes.data$z.age), to = max(rep.S1.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Representation",50),
rep("Pars Pro Toto",50),
rep("Complex Form Analogy",50),
rep("Simple Form Analogy",50)),
# the four conditions in the data
z.sex = rep(0,200),
z.trial = rep(0,200))
# here we generate the fitted values based on the model
# the function fitted() takes in the model and the new dataset and generates a fitted values (inclucing upper and lower 95% CI) for every row in the dataset
# because our dataset ranges from min age to max age in the data, we get the prediction for the age range in the data
# but we could also generate predictions for different ages of course
f1 <- fitted(S1.full.bm,
newdata = nd1,
re_formula = NA) %>%
# this tells the function to ignore the random effects - in theory, we could generate predictions for specific individuals
as_tibble() %>%
bind_cols(nd1)%>%
mutate(age = z.age + mean(rep.S1.bayes.data$aged)) # convert age back to the original scale by adding the mean of the data
# summarize the data to include them in the plot later on
d1 <- rep.S1.bayes.data%>%
group_by(subid, aged, condition)%>%
summarise(mean = mean(correct))
p1 <- f1 %>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/355.25, 2),
monthlabels = as.character(paste(months, "months"))
)
S1_plot <- ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = aged/365, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age/365, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
S1_plot
#
# S1_mixplot <- ggplot()+
#   geom_hline(yintercept = .5, lty = 2, alpha = .75)+
#   geom_point(data = d1, aes(x = aged/365, y = mean, col = condition), alpha = .5, shape = 1)+
#   geom_smooth(data = f1, aes(x = age/365, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition), stat = "identity", alpha = .4)+
#  # geom_vline(xintercept = round(f1$Q2.5=0.5), colour = "black", size = .5, alpha = .4) +
#   theme_minimal()+
#   scale_color_ptol(name = "condition")+
#   scale_fill_ptol(name = "condition")+
#   #facet_grid(~condition)+
#   labs(x = "Age", y="Proportion Correct")+
#   ylim(0,1)+
#   xlim(3,7)+
#   theme(legend.position = "bottom")
#
# S1_mixplot
p1 <- f1 %>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/355.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = aged/365, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age/365, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
# prepare data
rep.S2.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study2") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
z.age = aged - mean(aged),
z.sex = scale(as.numeric(sex)))
# clean data set?
str(rep.S1.bayes.data)
sapply(rep.S1.bayes.data, function(x) sum(is.na(x)))
S2.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data=rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S2.full.bm <- add_criterion(S2.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S2.full.bm, "./models/S2.full.bm.rds")
library("papaja")
r_refs("library.bib")
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
# General
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, Cohen's D
if (!require(ggthemes)) install.packages('ggthemes'); library(ggthemes) # for tufte boxplots
# bayes packages
if (!require(brms)) install.packages('brms'); library(brms) #
if (!require(tidybayes)) install.packages('tidybayes'); library(tidybayes) #
if (!require(HDInterval)) install.packages('HDInterval'); library(HDInterval) #
# Troubleshooting Knitting Document
# might be required for knitting manuscript
# install.packages('tinytex')
# tinytex::install_tinytex()
#
# tinytex::tlmgr_update()
# tinytex::reinstall_tinytex()
# Full data set including all participants (i.e. including dropped participants)
rep.data <- readRDS("./data/symlitrep_final_data.rds")
# $ study          : Factor w/ 3 levels --> Study1, Study2, Study3
# $ title          : Factor w/ 3 levels --> Name/Theme of the Study
# $ condition      : Factor w/ 12 levels --> Name of the condition i.e. experimental manipulation
# $ cond           : Factor w/ 12 levels --> Name of the condition in short form
# $ subid          : Factor w/ 364 levels --> Subjet ID
# $ sex            : Factor w/ 2 levels "0","1": --> Participants' sex; 1 = male
# $ agey           : num [1:7146] total age in years
# $ agem           : num [1:7146] total age in months
# $ aged           : num [1:7146] total age in days
# $ valid          : Factor w/ 3 levels --> Status of Participants
# "valid"= main sample
# "drop" = excluded participants
# "oversampling" = data collected after reaching the minimum of 96 participants per study
# $ drop           : Factor w/ 7 levels "fail_in_fam",..: --> Reasons for Participant exclusions
# fail_in_fam  --> did not meet criterion in familiarisation phase
# fussy_child  --> child was fussy or uncooperative, lost interest in participating
# language     --> child did not understand instructions due to not speaking German fluently enough
# oversampling --> Not a drop per se: participants tested after reaching minimum of participants
# quit_early   --> Children that quit early and did not contribute at least 8 test trials
# technical    --> technical problems; i.e. script for presenting experiment crashed
# $ trial          : Factor w/ 17 levels NUmbers 1-16 for test trials; "fam" for familiarisation trials
# $ correct        : int [1:7146] correct choice = 1; incorrect = 0
# $ rt             : int [1:7146] reaction time in ms
# $ experimenter   : Factor w/ 6 levels --> ID of the experimenter; E1 - E6
# $ where          : Factor w/ 4 levels
# afterschoolcenter --> after school care; testing in the early afternoon
# daycare --> testing in kindergartens, prior to lunch
# home --> testing during visits at home; usually in the afternoon
# lab --> children were tested when visiting the lab; usually in the afternoon
# $ eselectfam     : Factor w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during familiarisation traisl
# $ eselectmain    : Factor w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during test trails
# $ leftObject     : Factor w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the left side of the screen as target/distractor
# $ rightObject    : Factor w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the right side of the screen as target/distractor
# $ cue            : Factor w/ 98 levels "abpo_cue_1_A.png"
# --> stimulus item displayed in the middle of the screen as a cue
# $ target_position: Factor w/ 2 levels "left","right":
# side on which the target (i.e. correct choice) was presented
# $ item           : Factor w/ 4 levels "1","2","3","4":
# number of stimulus item in the respective condition
# $ target_shape   : Factor w/ 2 levels "A","B":
# target stimulus shape in the respective condition
# $ pick           : Factor w/ 2 levels "
# side of children's choice (left/right)
# prepare data
rep.S3.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study2") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
z.age = aged - mean(aged),
z.sex = scale(as.numeric(sex)))
sapply(rep.S1.bayes.data, function(x) sum(is.na(x)))
sapply(rep.S3.bayes.data, function(x) sum(is.na(x)))
S3.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data=rep.S3.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S3.full.bm <- add_criterion(S3.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S3.full.bm, "./models/S3.full.bm.rds")
library("papaja")
r_refs("library.bib")
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
# General
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, Cohen's D
if (!require(ggthemes)) install.packages('ggthemes'); library(ggthemes) # for tufte boxplots
# bayes packages
if (!require(brms)) install.packages('brms'); library(brms) #
if (!require(tidybayes)) install.packages('tidybayes'); library(tidybayes) #
if (!require(HDInterval)) install.packages('HDInterval'); library(HDInterval) #
# Troubleshooting Knitting Document
# might be required for knitting manuscript
# install.packages('tinytex')
# tinytex::install_tinytex()
#
# tinytex::tlmgr_update()
# tinytex::reinstall_tinytex()
# Full data set including all participants (i.e. including dropped participants)
rep.data <- readRDS("../data/symlitrep_final_data.rds")
knitr::include_graphics("../illustrations/Symlit_Rep_Setup.png", dpi = 108)
