days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/355.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = aged/365, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age/365, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
p1 <- f1 %>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/355.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = ageinyears, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
d1
f1
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
#geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = ageinyears, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
#geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
#geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
f1
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
#geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
#geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
#geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
#geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
#geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
#geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
#geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
#geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
#geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
#geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
f1
d1
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")
p1
f1
p1 <- f1 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/355.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
S1.full.bm
library(tidyverse)
# load data sets
rep.data <- readRDS("../data/symlitrep_final_data.rds")
setwd("~/Research/Symlit/symlit_rep_manuscript/manuscript")
library(tidyverse)
# load data sets
rep.data <- readRDS("../data/symlitrep_final_data.rds")
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial, rt) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/356.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
rep.S2.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study2") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial, rt) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/356.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
rep.S3.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study3") %>% # in study3
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial, rt) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/356.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
# load models
S1.full.bm <- readRDS("../models/S1.full.bm.rds")
S2.full.bm <- readRDS("../models/S2.full.bm.rds")
S3.full.bm <- readRDS("../models/S3.full.bm.rds")
S1.full.bm
S1.full.bm
pp_check(S1.full.bm)
# checking models -----------------------
library(brms)
pp_check(S1.full.bm)
S1.full.bm
pp_check(S2.full.bm)
S2.full.bm
S2.full.bm
rep.S1.bayes.data
S2.full.bm
pp_check(S3.full.bm)
S3.full.bm
library("papaja")
r_refs("library.bib")
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
# General
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, Cohen's D
if (!require(ggthemes)) install.packages('ggthemes'); library(ggthemes) # for tufte boxplots
# bayes packages
if (!require(brms)) install.packages('brms'); library(brms) #
if (!require(tidybayes)) install.packages('tidybayes'); library(tidybayes) #
if (!require(HDInterval)) install.packages('HDInterval'); library(HDInterval) #
# Troubleshooting Knitting Document
# might be required for knitting manuscript
# install.packages('tinytex')
# tinytex::install_tinytex()
#
# tinytex::tlmgr_update()
# tinytex::reinstall_tinytex()
S1.null.bm<-brm(correct~condition+z.age+z.trial+z.sex+(z.trial|subid),
data= rep.S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 2000,
cores= 4)
loo_compare(S1.null.bm, S1.full.bm)
S1.null.bm <- add_criterion(S1.null.bm, c("loo", "waic"))
loo_compare(S1.null.bm, S1.full.bm)
loo_compare(S1.null.bm, S1.full.bm)%>%as_tibble(rownames = "index")
loo_compare(S1.null.bm, S1.full.bm, criterion = "WAIC")%>%as_tibble(rownames = "index")
loo_compare(S1.null.bm, S1.full.bm, criterion = "waic")%>%as_tibble(rownames = "index")
weights(S1.null.bm, S1.full.bm, criterion = "waic")
waic_weights(S1.null.bm, S1.full.bm, criterion = "waic")
model_weights(S1.null.bm, S1.full.bm, criterion = "waic")
loo_compare(S1.null.bm, S1.full.bm, criterion = "waic")%>%as_tibble(rownames = "index")
S2.full.bm
S3.full.bm
S2.full.bm
S2.full.bm
S3.full.bm
S1.full.bm
S2.null.bm<-brm(correct~condition+z.age+z.trial+z.sex+(z.trial|subid),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 2000,
cores= 4)
S2.null.bm <- add_criterion(S2.null.bm, c("loo", "waic"))
loo_compare(S2.null.bm, S2.full.bm, criterion = "waic")%>%as_tibble(rownames = "index")
model_weights(S2.null.bm, S2.full.bm, criterion = "waic")
rep.S1.bayes.data
?fitted
library("papaja")
r_refs("library.bib")
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
# General
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, Cohen's D
if (!require(ggthemes)) install.packages('ggthemes'); library(ggthemes) # for tufte boxplots
if (!require(kableExtra)) install.packages('kableExtra'); library(kableExtra)
# bayes packages
if (!require(brms)) install.packages('brms'); library(brms) #
if (!require(tidybayes)) install.packages('tidybayes'); library(tidybayes) #
if (!require(HDInterval)) install.packages('HDInterval'); library(HDInterval) #
if (!require(posterior)) install.packages('posterior'); library(posterior) #
# basic analyses
if (!require(scales)) install.packages('scales'); library(scales) #
# Troubleshooting Knitting Document
# might be required for knitting manuscript
# install.packages('tinytex')
# tinytex::install_tinytex()
#
# tinytex::tlmgr_update()
# tinytex::reinstall_tinytex()
# Full data set including all participants (i.e. including dropped participants)
rep.data <- readRDS("../data/symlitrep_final_data.rds")
# test  <- rep.data %>%
#   #filter(valid != "drop") %>% # valid participants only
#   filter(trial != "fam") %>%
#   group_by(subid, agem) %>%
#   summarize(participants = n_distinct(subid),
#             trials = n())
# Study1
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, agey, agem, correct, trial, rt, cue) %>%
mutate(condition = factor(condition, levels = c(
"Representation", # first level becomes reference
"Pars Pro Toto",
"Simple Form Analogy",
"Complex Form Analogy"))) %>%
mutate(sex = factor(sex, levels = c(
"0", # first level becomes reference
"1"))) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/365.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex))) %>%
mutate(item = gsub("_A.png", "", cue)) %>%
mutate(item = gsub("_B.png", "", item))
# Study2
rep.S2.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study2") %>% # in study two
filter(trial != "fam") %>%
select(condition, subid, sex, aged, agey, agem, correct, trial, rt, cue) %>%
mutate(condition = factor(condition, levels = c(
"Absolute Position", # first level becomes reference
"Relative Position",
"Orientation of Object",
"Orientation of Feature"))) %>%
mutate(sex = factor(sex, levels = c(
"0", # first level becomes reference
"1"))) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/365.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex))) %>%
mutate(item = gsub("_A.png", "", cue)) %>%
mutate(item = gsub("_B.png", "", item))
# Study 3
rep.S3.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study3") %>% # in study two
filter(trial != "fam") %>%
select(condition, subid, sex, aged, agey, agem, correct, trial, rt, cue) %>%
mutate(condition = factor(condition, levels = c(
"Size of Object", # first level becomes reference
"Size of Feature",
"Number of Object",
"Number of Feature"))) %>%
mutate(sex = factor(sex, levels = c(
"0", # first level becomes reference
"1"))) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/365.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex))) %>%
mutate(item = gsub("_A.png", "", cue)) %>%
mutate(item = gsub("_B.png", "", item))
# test <- rep.data %>%
#   filter(valid != "drop") %>%
#   group_by(study) %>%
#   summarize(min_Age = min(agem))
# test <- rep.data %>%
#   filter(valid != "drop") %>%
#   group_by(study, condition) %>%
#   summarize(N = length(subid))
# $ study          : chr w/ 3 levels --> Study1, Study2, Study3
# $ title          : chr w/ 3 levels --> Name/Theme of the Study
# $ condition      : chr w/ 12 levels --> Name of the condition i.e. experimental manipulation
# $ cond           : chr w/ 12 levels --> Name of the condition in short form
# $ subid          : chr w/ 364 levels --> Subjet ID
# $ sex            : chr w/ 2 levels "0","1": --> Participants' sex; 1 = male
# $ agey           : num [1:7146] total age in years
# $ agem           : num [1:7146] total age in months
# $ aged           : num [1:7146] total age in days
# $ valid          : chr w/ 3 levels --> Status of Participants
# "valid"= main sample
# "drop" = excluded participants
# "oversampling" = data collected after reaching the minimum of 96 participants per study
# $ drop           : chr w/ 7 levels "fail_in_fam",..: --> Reasons for Participant exclusions
# fail_in_fam  --> did not meet criterion in familiarisation phase
# fussy_child  --> child was fussy or uncooperative, lost interest in participating
# language     --> child did not understand instructions due to not speaking German fluently enough
# oversampling --> Not a drop per se: participants tested after reaching minimum of participants
# quit_early   --> Children that quit early and did not contribute at least 8 test trials
# technical    --> technical problems; i.e. script for presenting experiment crashed
# $ trial          : chr w/ 17 levels NUmbers 1-16 for test trials; "fam" for familiarisation trials
# $ correct        : int [1:7146] correct choice = 1; incorrect = 0
# $ rt             : int [1:7146] reaction time in ms
# $ experimenter   : chr w/ 6 levels --> ID of the experimenter; E1 - E6
# $ where          : chr w/ 4 levels
# afterschoolcenter --> after school care; testing in the early afternoon
# daycare --> testing in kindergartens, prior to lunch
# home --> testing during visits at home; usually in the afternoon
# lab --> children were tested when visiting the lab; usually in the afternoon
# $ eselectfam     : chr w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during familiarisation traisl
# $ eselectmain    : chr w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during test trails
# $ leftObject     : chr w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the left side of the screen as target/distractor
# $ rightObject    : chr w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the right side of the screen as target/distractor
# $ cue            : chr w/ 98 levels "abpo_cue_1_A.png"
# --> stimulus item displayed in the middle of the screen as a cue
# $ target_position: chr w/ 2 levels "left","right":
# side on which the target (i.e. correct choice) was presented
# $ item           : chr w/ 4 levels "1","2","3","4":
# number of stimulus item in the respective condition
# $ target_shape   : chr w/ 2 levels "A","B":
# target stimulus shape in the respective condition
# $ pick           : chr w/ 2 levels "
# side of children's choice (left/right)
?brm
rep.S1.bayes.data
S1.full.bm<-brm(correct~condition*z.age+z.trial+sex+(z.trial|subid),
data= rep.S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S1.full.bm
plogis(2.02)
plogis(2.02-0.13)
plogis(2.02-1.39)
nd1 <- tibble(z.age = rep(seq(from = min(rep.S1.bayes.data$z.age), to = max(rep.S1.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Representation",50),
rep("Pars Pro Toto",50),
rep("Complex Form Analogy",50),
rep("Simple Form Analogy",50)),
# the four conditions in the data
sex = rep(0,200),
z.trial = rep(0,200))
nd1
pp_check(S1.full.bm)
rep.S1.bayes.data
