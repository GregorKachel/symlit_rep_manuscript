group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
nd3 <- add_colour(nd3)
f3  <- add_colour(f3)
d3  <- add_colour(d3)
p3  <- add_colour(p3)
p_all <- rbind(p1,p2,p3) %>% arrange(months)
p_all <- data.frame(p_all, row.names = "condition")
p_all
View(rep.data)
# S1.full.bm<-brm(correct~condition*z.age+z.trial+sex+(z.trial|subid)
table(rep.S1.bayes.data$condition, rep.S1.bayes.data$cue)
table(rep.S1.bayes.data$cue)
table(rep.S1.bayes.data$condition)
S1.cue.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|cue),
data= rep.S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S1.cue.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|cue),
data= rep.S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S1.cue.model <- add_criterion(S1.cue.model, c("loo", "waic"))
saveRDS(S1.cue.model, "../models/S1.cue.model.rds")
S2.cue.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|cue),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S2.cue.model <- add_criterion(S2.cue.model, c("loo", "waic"))
saveRDS(S2.cue.model, "../models/S2.cue.model.rds")
# table(rep.S2.bayes.data$condition, rep.S2.bayes.data$cue)
table(rep.S1.bayes.data$cue)
table(rep.S1.bayes.data$condition)
# table(rep.S3.bayes.data$condition, rep.S3.bayes.data$cue)
table(rep.S3.bayes.data$cue)
table(rep.S3.bayes.data$condition)
table(rep.S3.bayes.data$condition, rep.S3.bayes.data$cue)
S3.cue.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|cue),
data= rep.S3.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S3.cue.model <- add_criterion(S3.cue.model, c("loo", "waic"))
saveRDS(S3.cue.model, "../models/S3.cue.model.rds")
### POSTERIOR PREDICTICE CHECKS
pp_check(S1.cue.model)
pp_check(S1.cue.model, type = "bars")
pp_check(S2.cue.model)
pp_check(S3.cue.model)
pp_check(S1.cue.model, type = "bars")
pp_check(S2.cue.model, type = "bars")
pp_check(S3.cue.model, type = "bars")
summary(S1.cue.model) # Intercept 0.45 .10-.27
summary(S2.cue.model) # Intercept 0.45 .10-.27
summary(S1.cue.model) # Intercept 0.45 .10-.28
summary(S2.cue.model) # Intercept 0.45 .10-.27
summary(S3.cue.model) # Intercept 0.45 .10-.27
summary(S1.cue.model) # Intercept 0.45 .10-.28
#                       Estimate Est.Error l-95% CI
summary(S1.cue.model) # Intercept 0.45      0.10     0.28
summary(S2.cue.model) # Intercept 0.28      0.12     0.04
summary(S3.cue.model) # Intercept 0.25      0.11     0.03
S1.cue.coef <- summarise_draws(as_draws_df(S1.cue.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
S1.cue.coef <- summarise_draws(as_draws_df(S1.cue.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
# CUE
# all > 1000
mean(S1.cue.coef$ess_bulk)
min(S1.cue.coef$ess_bulk)
max(S1.cue.coef$ess_bulk)
mean(S1.cue.coef$rhat)
min(S1.cue.coef$rhat)
max(S1.cue.coef$rhat)
#Study 2
S2.cue.coef <- summarise_draws(as_draws_df(S2.cue.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
#Study 2
S2.cue.coef <- summarise_draws(as_draws_df(S2.cue.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
# all > 1000
mean(S2.cue.coef$ess_bulk)
min(S2.cue.coef$ess_bulk)
max(S2.cue.coef$ess_bulk)
min(S2.cue.coef$ess_bulk)
max(S2.cue.coef$ess_bulk)
# all = 1
mean(S2.cue.coef$rhat)
min(S2.cue.coef$rhat)
max(S2.cue.coef$rhat)
#Study 3
S3.cue.coef <- summarise_draws(as_draws_df(S3.cue.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
# all > 1000
mean(S3.cue.coef$ess_bulk)
min(S3.cue.coef$ess_bulk)
max(S3.cue.coef$ess_bulk)
# all = 1
mean(S3.cue.coef$rhat)
min(S3.cue.coef$rhat)
max(S3.cue.coef$rhat)
# summary(S1.item.model)
cue_effects <- ranef(S1.cue.model)$cue
cue_effects
cue_intercepts <- as_tibble(cue_effects[, , "Intercept"], rownames = "cue") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(cue,1,4))
cue_intercepts
cue.plot <- ggplot(cue_intercepts, aes(x = reorder(cue, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "Cue-Level Random Intercepts by Condition",
x = "Cue",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",  # Remove if you want a legend
strip.text = element_text(size = 12, face = "bold")
)
cue.plot
S1.cue_effects <- ranef(S1.cue.model)$cue
# Extract random intercepts
S1.cue_intercepts <- as_tibble(S1.cue_effects[, , "Intercept"], rownames = "cue") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(cue,1,4))
S2.cue_effects <- ranef(S2.cue.model)$cue
# Extract random intercepts
S2.cue_intercepts <- as_tibble(S2.cue_effects[, , "Intercept"], rownames = "cue") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(cue,1,4))
S2.cue.plot <- ggplot(S2.cue_intercepts, aes(x = reorder(cue, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "Cue-Level Random Intercepts by Condition",
x = "Cue",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
S3.cue_effects <- ranef(S3.cue.model)$cue
# Extract random intercepts
S3.cue_intercepts <- as_tibble(S3.cue_effects[, , "Intercept"], rownames = "cue") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(cue,1,4))
S3.cue.plot <- ggplot(S3.cue_intercepts, aes(x = reorder(cue, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "Cue-Level Random Intercepts by Condition",
x = "Cue",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
S1.cue.plot
S1.cue_effects <- ranef(S1.cue.model)$cue
# Extract random intercepts
S1.cue_intercepts <- as_tibble(S1.cue_effects[, , "Intercept"], rownames = "cue") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(cue,1,4))
S1.cue.plot <- ggplot(S1.cue_intercepts, aes(x = reorder(cue, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "Cue-Level Random Intercepts by Condition",
x = "Cue",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
S1.cue.plot
S2.cue.plot
S3.cue.plot
S1.cue.plot
S1.item.model <- readRDS("../models/S1.item.model.rds")
# summary(S1.item.model)
item_effects <- ranef(S1.item.model)$item
# Extract random intercepts
item_intercepts <- as_tibble(item_effects[, , "Intercept"], rownames = "item") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(item,1,4))
item.plot <- ggplot(item_intercepts, aes(x = reorder(item, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "Item-Level Random Intercepts by Condition",
x = "Item",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
item.plot
View(rep.S1.bayes.data)
View(rep.S2.bayes.data)
View(rep.S3.bayes.data)
S1.item.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|item),
data= rep.S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S1.item.model <- add_criterion(S1.item.model, c("loo", "waic"))
S1.item.model <- add_criterion(S1.item.model, c("loo", "waic"))
aveRDS(S1.item.model, "../models/S1.item.model.rds")
saveRDS(S1.item.model, "../models/S1.item.model.rds")
S1.item.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|item),
data= rep.S1.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
# table(rep.S1.bayes.data$condition, rep.S1.bayes.data$item)
table(rep.S1.bayes.data$item)
table(rep.S1.bayes.data$condition, rep.S1.bayes.data$item)
table(rep.S2.bayes.data$condition, rep.S2.bayes.data$item)
table(rep.S2.bayes.data$item)
table(rep.S2.bayes.data$condition)
S2.item.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|item),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S2.item.model <- add_criterion(S2.item.model, c("loo", "waic"))
saveRDS(S2.item.model, "../models/S2.item.model.rds")
S3.item.model<-brm(correct ~ condition*z.age +z.trial +sex +(z.trial|subid) +(z.age|item),
data= rep.S3.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S3.item.model <- add_criterion(S3.item.model, c("loo", "waic"))
saveRDS(S3.item.model, "../models/S3.item.model.rds")
saveRDS(S3.item.model, "../models/S3.item.model.rds")
S1.item.model <- readRDS("../models/S1.item.model.rds")
S2.item.model <- readRDS("../models/S2.item.model.rds")
S3.item.model <- readRDS("../models/S3.item.model.rds")
S1.item.model <- readRDS("../models/S1.item.model.rds")
S2.item.model <- readRDS("../models/S2.item.model.rds")
S3.item.model <- readRDS("../models/S3.item.model.rds")
### POSTERIOR PREDICTICE CHECKS
pp_check(S1.item.model)
pp_check(S1.item.model)
pp_check(S1.item.model, type = "bars")
pp_check(S2.item.model)
pp_check(S3.item.model)
summary(S1.item.model)
summary(S2.item.model)
summary(S3.item.model)
S1.item.coef <- summarise_draws(as_draws_df(S1.item.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
# all > 1000
mean(S1.item.coef$ess_bulk)
min(S1.item.coef$ess_bulk)
max(S1.item.coef$ess_bulk)
# all = 1
mean(S1.item.coef$rhat)
min(S1.item.coef$rhat)
max(S1.item.coef$rhat)
S2.item.coef <- summarise_draws(as_draws_df(S2.item.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
# all > 1000
mean(S2.item.coef$ess_bulk)
min(S2.item.coef$ess_bulk)
max(S2.item.coef$ess_bulk)
# all = 1
mean(S2.item.coef$rhat)
min(S2.item.coef$rhat)
max(S2.item.coef$rhat)
mean(S2.item.coef$ess_bulk)
min(S2.item.coef$ess_bulk)
max(S2.item.coef$ess_bulk)
# all = 1
mean(S2.item.coef$rhat)
min(S2.item.coef$rhat)
max(S2.item.coef$rhat)
S3.item.coef <- summarise_draws(as_draws_df(S3.item.model)) %>%
filter(grepl("^b_", variable) |
grepl("^sd_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
mean(S3.item.coef$ess_bulk)
min(S3.item.coef$ess_bulk)
max(S3.item.coef$ess_bulk)
# all = 1
mean(S3.item.coef$rhat)
min(S3.item.coef$rhat)
max(S3.item.coef$rhat)
# all > 1000
mean(S2.item.coef$ess_bulk)
min(S2.item.coef$ess_bulk)
max(S2.item.coef$ess_bulk)
# all = 1
mean(S2.item.coef$rhat)
min(S2.item.coef$rhat)
max(S2.item.coef$rhat)
S1.item_effects <- ranef(S1.item.model)$item
S1.item_effects <- ranef(S1.item.model)$item
# Extract random intercepts
S1.item_intercepts <- as_tibble(S1.item_effects[, , "Intercept"], rownames = "item") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(item,1,4))
S1.item.plot <- ggplot(S1.item_intercepts, aes(x = reorder(item, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "item-Level Random Intercepts by Condition",
x = "item",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
S2.item_effects <- ranef(S2.item.model)$item
# Extract random intercepts
S2.item_intercepts <- as_tibble(S2.item_effects[, , "Intercept"], rownames = "item") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(item,1,4))
S2.item.plot <- ggplot(S2.item_intercepts, aes(x = reorder(item, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "item-Level Random Intercepts by Condition",
x = "item",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
S3.item_effects <- ranef(S3.item.model)$item
# Extract random intercepts
S3.item_intercepts <- as_tibble(S3.item_effects[, , "Intercept"], rownames = "item") %>%
rename(
estimate = Estimate,
lower = Q2.5,
upper = Q97.5) %>%
mutate(condition = substr(item,1,4))
S3.item.plot <- ggplot(S3.item_intercepts, aes(x = reorder(item, estimate), y = estimate, color = condition)) +
geom_point() +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.2) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray50") +
coord_flip() +
facet_wrap(~ condition, scales = "free_y", ncol = 1) +
labs(
title = "item-Level Random Intercepts by Condition",
x = "item",
y = "Estimated Deviation from Overall Intercept (log-odds)",
color = "Condition"
) +
theme_minimal() +
theme(
legend.position = "none",
strip.text = element_text(size = 12, face = "bold"))
S1.item.plot
S2.item.plot
S3.item.plot
S1.item.plot + S2.item.plot + S3.item.plot
library(patchwork)
S1.item.plot + S2.item.plot + S3.item.plot
library(cowplot)
combined <- plot_grid(S1.item.plot, S2.item.plot, S3.item.plot,
nrow = 1, labels = NULL, align = "hv")
title <- ggdraw() + draw_label("Main Headline", fontface = "bold", size = 16)
plot_grid(title, combined, ncol = 1, rel_heights = c(0.1, 1))
library(patchwork)
# Combine plots side by side
combined <- S1.item.plot + S2.item.plot + S3.item.plot +
plot_layout(guides = "collect") &   # collect legends into one
theme(legend.position = "bottom")   # put legend under the row
# Add shared titles
combined <- combined +
plot_annotation(
title = "Main Headline",
subtitle = "Optional subtitle",
theme = theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12)
)
)
combined
S1.item.plot <- S1.item.plot + labs(x = NULL, y = NULL)
S2.item.plot <- S2.item.plot + labs(x = NULL, y = NULL)
S3.item.plot <- S3.item.plot + labs(x = "Trial", y = "Accuracy")
# Combine plots side by side
combined <- S1.item.plot + S2.item.plot + S3.item.plot +
plot_layout(guides = "collect") &   # collect legends into one
theme(legend.position = "bottom")   # put legend under the row
# Add shared titles
combined <- combined +
plot_annotation(
title = "Main Headline",
subtitle = "Optional subtitle",
theme = theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12)
)
)
combined
S1.item.plot +
S2.item.plot +
S3.item.plot
S1.item.plot +
S2.item.plot +
S3.item.plot
