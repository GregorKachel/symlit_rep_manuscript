)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
S1.full.bm <- readRDS("../models/S1.full.bm.rds")
S1.null.bm <- readRDS("../models/S1.null.bm.rds")
S1.comp <- readRDS("../models/S1.comp.rds")
S1.weights <- readRDS("../models/S1.weights.rds")
View(S1.comp)
View(S1.weights)
View(S1.weights)
round(mean(S1.full.coef_table$ess_bulk), 0)
S1.weights
S1.weights$value[index == "S1.fullbm"]
S1.weights$value[index = "S1.fullbm"]
S1.weights$value[index = "S1.full.bm"]
S1.weights$value
S1.weights$value[1]
S1.weights$value[1]*100
round(S1.weights$value[1]*100,2)
round(S1.weights$value[1]*100,2)
S1.comp <- loo_compare(S1.null.bm, S1.full.bm, criterion = "waic")%>%as_tibble(rownames = "index")
S1.comp <- loo_compare(S1.null.bm, S1.full.bm, criterion = "waic")%>%as_tibble(rownames = "index")
S1.comp
round(S1.comp$elpd_waic[1]),2)
round(S1.comp$elpd_waic[1],2)
round(S1.comp$elpd_diff[2],2)
S1.null.loo <- loo(S1.null.bm)
S1.full.loo <- loo(S1.full.bm)
S1.loo.comp <- loo_compare(S1.null.loo, S1.full.loo) %>%
as_tibble(rownames = "model")
S1.null.loo <- loo(S1.null.bm)
S1.full.loo <- loo(S1.full.bm)
S1.loo.comp <- loo_compare(S1.null.loo, S1.full.loo) %>%
as_tibble(rownames = "model")
S1.loo.comp
S1.loo.comp
S1.comp
summary(S1.full.bm)
summary(S1.full.bm)
summary(S1.full.bm)
summary(S1.full.bm)
summary_df <- summarise_draws(as_draws_df(S1.full.bm))
summary_df
post_sum <- posterior_summary(S1.full.bm, probs = c(0.025, 0.975))
head(post_sum)
post_sum
summary(S1.full.bm)
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable))
S1.full.coef_table
post_sum
post_sum <- posterior_summary(S1.full.bm, probs = c(0.025, 0.975))
head(post_sum)
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable))
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable))
S1.full.coef_table
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)
S1.full.coef_table
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable))
S1.full.coef_table
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable))
S1.full.coef_table
coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
rename(
parameter = variable,
estimate = mean,
se = sd,
ci_lower = q2.5,
ci_upper = q97.5,
rhat = rhat,
ess_bulk = ess_bulk,
ess_tail = ess_tail
)
# Summarize all draws
summary_df <- summarise_draws(as_draws_df(S1.full.bm))
# Filter only fixed effects (they start with "b_")
coef_table <- summary_df %>%
filter(grepl("^b_", variable)) %>%
rename(
parameter = variable,
estimate = mean,
se = sd,
ci_lower = q2.5,
ci_upper = q97.5,
rhat = rhat,
ess_bulk = ess_bulk,
ess_tail = ess_tail
)
summary_df <- summarise_draws(as_draws_df(S1.full.bm))
names(summary_df)
summary_df
summary_df
# Summarize all draws
summary_df <- summarise_draws(as_draws_df(S1.full.bm))
# Filter only fixed effects (they start with "b_")
coef_table <- summary_df %>%
filter(grepl("^b_", variable)) %>%
rename(
parameter = variable,
estimate = mean,
se = sd,
ci_lower = q2.5,
ci_upper = q97.5,
rhat = rhat,
ess_bulk = ess_bulk,
ess_tail = ess_tail
)
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable))
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable))
S1.full.coef_table
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable))
S1.full.coef_table
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable))
S1.full.coef_table
S1.full.coef_table <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable))
# for reporting BULK_ESS
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable))
# for reporting BULK_ESS
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable))
S1.null.coef <- summarise_draws(as_draws_df(S1.null.bm)) %>%
filter(grepl("^b_", variable))
)
S1.full.coef$mean[variable=="ParsProToto"]
View(S1.full.coef)
S1.full.coef$mean[variable=="ParsProToto"]
names(S1.full.coef)
S1.full.coef$mean[variable=="ParsProToto"]
View(S1.full.coef)
names(S1.full.coef)
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable))
names(S1.full.coef)
S1.full.coef$mean[variable=="ParsProToto"]
S1.full.coef$mean
S1.full.coef$variable
mean(S1.full.coef$ess_bulk)
S1.full.coef$mean[variable=="ParsProToto"]
S1.full.coef$mean[Variable=="ParsProToto"]
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
rename(condition = variable)
names(S1.full.coef)
S1.full.coef$mean[condition=="ParsProToto"]
str(S1.full.coef)
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
as.tibble()
str(S1.full.coef)
names(S1.full.coef)
S1.full.coef$mean[condition=="ParsProToto"]
S1.full.coef$mean[variable=="ParsProToto"]
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
as_tibble()
str(S1.full.coef)
S1.full.coef$mean[variable=="ParsProToto"]
S1.full.coef$mean[variable=="ParsProToto"]
S1.full.coef$mean[S1.full.coef$variable=="ParsProToto"]
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(rep.drop.table.data, row.names = "variable")
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
str(S1.full.coef)
S1.full.coef
S1.full.coe["ParsProToto", "mean"]
S1.full.coef["ParsProToto", "mean"]
# for reporting BULK_ESS
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
S1.null.coef <- summarise_draws(as_draws_df(S1.null.bm)) %>%
filter(grepl("^b_", variable))
# Plot without facetting
p1 <- f1 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
S1.full.bm <- readRDS("../models/S1.full.bm.rds")
S1.null.bm <- readRDS("../models/S1.null.bm.rds")
S1.comp <- readRDS("../models/S1.comp.rds")
S1.weights <- readRDS("../models/S1.weights.rds")
### POSTERIOR PREDICTICE CHECKS
### Check plots ...they look good, as expected in binomial models
# pp_check(S1.full.bm)
# pp_check(S1.null.bm)
# pp_check(S1.full.bm, type = "bars")
# pp_check(S1.null.bm, type = "bars")
### EFFECTICE SAMPLE SIZES
### inspect rhat --> always 1 --> good
### inspect Bull_ESS --> always > 1000 --> good
# summary(S1.full.bm)
# summary(S1.null.bm)
# for reporting BULK_ESS
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
S1.null.coef <- summarise_draws(as_draws_df(S1.null.bm)) %>%
filter(grepl("^b_", variable))
# mean(S1.full.coef_table$ess_bulk)
# min(S1.full.coef_table$ess_bulk)
# max(S1.full.coef_table$ess_bulk)
#
# mean(S1.null.coef_table$ess_bulk)
# min(S1.null.coef_table$ess_bulk)
# max(S1.null.coef_table$ess_bulk)
# load model from rds
# S1.full.bm <- readRDS("../models/S1.full.bm.rds")
# table(rep.S1.bayes.data$condition)
nd1 <- tibble(z.age = rep(seq(from = min(rep.S1.bayes.data$z.age), to = max(rep.S1.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Representation",50),
rep("Pars Pro Toto",50),
rep("Complex Form Analogy",50),
rep("Simple Form Analogy",50)),
# the four conditions in the data
sex = rep(0,200),
z.trial = rep(0,200))
library("papaja")
r_refs("library.bib")
# Loading packages
# NOTE: this will install these packages on your machine in case they are missing
# General
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, Cohen's D
if (!require(ggthemes)) install.packages('ggthemes'); library(ggthemes) # for tufte boxplots
# bayes packages
if (!require(brms)) install.packages('brms'); library(brms) #
if (!require(tidybayes)) install.packages('tidybayes'); library(tidybayes) #
if (!require(HDInterval)) install.packages('HDInterval'); library(HDInterval) #
if (!require(posterior)) install.packages('posterior'); library(posterior) #
# Troubleshooting Knitting Document
# might be required for knitting manuscript
# install.packages('tinytex')
# tinytex::install_tinytex()
#
# tinytex::tlmgr_update()
# tinytex::reinstall_tinytex()
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# Full data set including all participants (i.e. including dropped participants)
rep.data <- readRDS("../data/symlitrep_final_data.rds")
# str(rep.data)
# test <- rep.data %>%
#   filter(valid != "drop") %>%
#   group_by(study) %>%
#   summarize(min_Age = min(agem))
# test <- rep.data %>%
#   filter(valid != "drop") %>%
#   group_by(study, condition) %>%
#   summarize(N = length(subid))
# $ study          : chr w/ 3 levels --> Study1, Study2, Study3
# $ title          : chr w/ 3 levels --> Name/Theme of the Study
# $ condition      : chr w/ 12 levels --> Name of the condition i.e. experimental manipulation
# $ cond           : chr w/ 12 levels --> Name of the condition in short form
# $ subid          : chr w/ 364 levels --> Subjet ID
# $ sex            : chr w/ 2 levels "0","1": --> Participants' sex; 1 = male
# $ agey           : num [1:7146] total age in years
# $ agem           : num [1:7146] total age in months
# $ aged           : num [1:7146] total age in days
# $ valid          : chr w/ 3 levels --> Status of Participants
# "valid"= main sample
# "drop" = excluded participants
# "oversampling" = data collected after reaching the minimum of 96 participants per study
# $ drop           : chr w/ 7 levels "fail_in_fam",..: --> Reasons for Participant exclusions
# fail_in_fam  --> did not meet criterion in familiarisation phase
# fussy_child  --> child was fussy or uncooperative, lost interest in participating
# language     --> child did not understand instructions due to not speaking German fluently enough
# oversampling --> Not a drop per se: participants tested after reaching minimum of participants
# quit_early   --> Children that quit early and did not contribute at least 8 test trials
# technical    --> technical problems; i.e. script for presenting experiment crashed
# $ trial          : chr w/ 17 levels NUmbers 1-16 for test trials; "fam" for familiarisation trials
# $ correct        : int [1:7146] correct choice = 1; incorrect = 0
# $ rt             : int [1:7146] reaction time in ms
# $ experimenter   : chr w/ 6 levels --> ID of the experimenter; E1 - E6
# $ where          : chr w/ 4 levels
# afterschoolcenter --> after school care; testing in the early afternoon
# daycare --> testing in kindergartens, prior to lunch
# home --> testing during visits at home; usually in the afternoon
# lab --> children were tested when visiting the lab; usually in the afternoon
# $ eselectfam     : chr w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during familiarisation traisl
# $ eselectmain    : chr w/ 2 levels "0","1"
# experimenter occasionally selected choices based on child's pointing during test trails
# $ leftObject     : chr w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the left side of the screen as target/distractor
# $ rightObject    : chr w/ 99 levels "abpo_tar_1_A.png"
# --> stimulus item displayed on the right side of the screen as target/distractor
# $ cue            : chr w/ 98 levels "abpo_cue_1_A.png"
# --> stimulus item displayed in the middle of the screen as a cue
# $ target_position: chr w/ 2 levels "left","right":
# side on which the target (i.e. correct choice) was presented
# $ item           : chr w/ 4 levels "1","2","3","4":
# number of stimulus item in the respective condition
# $ target_shape   : chr w/ 2 levels "A","B":
# target stimulus shape in the respective condition
# $ pick           : chr w/ 2 levels "
# side of children's choice (left/right)
rep.age.table.data  <- rep.data %>%
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop") %>%  # filter out dropped participants
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
SD = round(sd(agem), 2),
N_daycare = length(subid[where == "daycare"]),
N_lab = length(subid[where == "lab"]),
N_home = length(subid[where == "home"]),
N_hort = length(subid[where == "afterschoolcenter"]))
rep.age.table.data <- data.frame(rep.age.table.data, row.names = "study")
rep.drop.table.data  <- rep.data %>%
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid == "drop") %>%
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
fail_in_fam = length(subid[drop == "fail_in_fam"]),
quit_early = length(subid[drop == "quit_early"]),
fussy_child = length(subid[drop == "fussy_child"]),
language = length(subid[drop == "language"]),
technical = length(subid[drop == "technical"]))
rep.drop.table.data <- data.frame(rep.drop.table.data, row.names = "study")
knitr::include_graphics("../illustrations/Symlit_Rep_Setup.png", dpi = 108)
# table(rep.data$study, rep.data$condition)
# prepare data
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial, rt) %>%
mutate(condition = factor(condition, levels = c(
"Representation", # first level becomes reference
"Pars Pro Toto",
"Simple Form Analogy",
"Complex Form Analogy"))) %>%
mutate(sex = factor(sex, levels = c(
"0", # first level becomes reference
"1"))) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/365.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
# clean data set?
# str(rep.S1.bayes.data) # overview
# sapply(rep.S1.bayes.data, function(x) sum(is.na(x)))
S1.full.bm <- readRDS("../models/S1.full.bm.rds")
S1.null.bm <- readRDS("../models/S1.null.bm.rds")
S1.comp <- readRDS("../models/S1.comp.rds")
S1.weights <- readRDS("../models/S1.weights.rds")
### POSTERIOR PREDICTICE CHECKS
### Check plots ...they look good, as expected in binomial models
# pp_check(S1.full.bm)
# pp_check(S1.null.bm)
# pp_check(S1.full.bm, type = "bars")
# pp_check(S1.null.bm, type = "bars")
### EFFECTICE SAMPLE SIZES
### inspect rhat --> always 1 --> good
### inspect Bull_ESS --> always > 1000 --> good
# summary(S1.full.bm)
# summary(S1.null.bm)
# for reporting BULK_ESS
S1.full.coef <- summarise_draws(as_draws_df(S1.full.bm)) %>%
filter(grepl("^b_", variable)) %>%
mutate(variable = gsub("b_", "", variable)) %>%
mutate(variable = gsub("condition", "", variable)) %>%
data.frame(row.names = "variable")
S1.null.coef <- summarise_draws(as_draws_df(S1.null.bm)) %>%
filter(grepl("^b_", variable))
# mean(S1.full.coef_table$ess_bulk)
# min(S1.full.coef_table$ess_bulk)
# max(S1.full.coef_table$ess_bulk)
#
# mean(S1.null.coef_table$ess_bulk)
# min(S1.null.coef_table$ess_bulk)
# max(S1.null.coef_table$ess_bulk)
# load model from rds
# S1.full.bm <- readRDS("../models/S1.full.bm.rds")
# table(rep.S1.bayes.data$condition)
nd1 <- tibble(z.age = rep(seq(from = min(rep.S1.bayes.data$z.age), to = max(rep.S1.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Representation",50),
rep("Pars Pro Toto",50),
rep("Complex Form Analogy",50),
rep("Simple Form Analogy",50)),
# the four conditions in the data
sex = rep(0,200),
z.trial = rep(0,200))
# here we generate the fitted values based on the model
# the function fitted() takes in the model and the new dataset and generates a fitted values (inclucing upper and lower 95% CI) for every row in the dataset
# because our dataset ranges from min age to max age in the data, we get the prediction for the age range in the data
# but we could also generate predictions for different ages of course
f1 <- fitted(S1.full.bm,
newdata = nd1,
re_formula = NA) %>%
# this tells the function to ignore the random effects - in theory, we could generate predictions for specific individuals
as_tibble() %>%
bind_cols(nd1)%>%
mutate(age = z.age + mean(rep.S1.bayes.data$ageinyears)) # convert age back to the original scale by adding the mean of the data
# summarize the data to include them in the plot later on
d1 <- rep.S1.bayes.data%>%
group_by(subid, ageinyears, condition)%>%
summarise(mean = mean(correct))
# Plot without facetting
p1 <- f1 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
View(p1)
p1$months[condition == "Representation
p1$months[condition == "Representation]
p1$months[condition == "Representation]
p1$months[condition == "Representation"]
p1$months[condition == "Representation"]
p1$months[condition == "Representation"]
p1$months[condition == "Representation"]
p1$months[condition == "Representation"]
p1$months[p1$condition == "Representation"]
