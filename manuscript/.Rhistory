p1 <- f1 %>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
S1_plot <- ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age/365.25, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
S1_plot
p1 <- f1 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
S1_plot <- ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age/365.25, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
S1_plot
p1 <- f1 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
S1_plot <- ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d1, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f1, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p1, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p1, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p1, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
S1_plot
# prepare data
rep.S2.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study2") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/356.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
unique(rep.S2.bayes.data$condition)
rep.S2.bayes.data%>%
filter(condition == "Pars Pro Toto")
table(rep.data$study, rep.data$condition)
# prepare data
rep.S2.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study2") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/356.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
# # prepare data
# rep.S2.bayes.data  <- rep.data %>%
#   filter(valid != "drop") %>% # valid participants only
#   filter(study == "study2") %>% # in study 2
#   filter(trial != "fam") %>%
#   select(condition, subid, sex, ageinyears, correct, trial) %>%
#   mutate(z.trial = scale(as.numeric(as.character(trial))),
#          z.age = agey - mean(agey),
#          z.sex = scale(as.numeric(sex)),
#          subid = paste0("id", subid))%>%
#   mutate(condition = as.character(condition))
condition*z.age+z.trial+sex+(z.trial
S2.full.bm<-brm(correct~condition+z.age+(1|subid),
S2.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 2000,
cores= 4)
S2.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 2000,
cores= 4)
S2.full.bm <- add_criterion(S2.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S2.full.bm, "../models/S2.full.bm.r
# Saving the model (to not rerun it every time)
saveRDS(S2.full.bm, "../models/S2.full.bm.rds")
View(S2.full.bm)
S2.full.bm
# Saving the model (to not rerun it every time)
saveRDS(S2.full.bm, "../models/S2.full.bm.rds")
# load model from saving rds
S2.full.bm <- readRDS("../models/S2.full.bm.rds")
table(rep.S2.bayes.data)
table(rep.S2.bayes.data$condition)
# load model from saving rds
S2.full.bm <- readRDS("../models/S2.full.bm.rds")
nd2 <- tibble(z.age = rep(seq(from = min(S2.bayes.data$z.age), to = max(S2.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Relative Position",50),
rep("Absolute Position",50),
rep("Orientation of Feature",50),
rep("Orientation of Object",50)), # the four conditions in the data
z.sex = rep(0,200),
z.trial = rep(0,200))
nd2 <- tibble(z.age = rep(seq(from = min(rep.S2.bayes.data$z.age), to = max(S2.bayes.data$z.age), length.out = 50),4),
condition = c(rep("Relative Position",50),
rep("Absolute Position",50),
rep("Orientation of Feature",50),
rep("Orientation of Object",50)), # the four conditions in the data
z.sex = rep(0,200),
z.trial = rep(0,200))
nd2 <- tibble(z.age = rep(seq(from = min(rep.S2.bayes.data$z.age),
to = max(rep.S2.bayes.data$z.age),
length.out = 50),4),
condition = c(rep("Relative Position",50),
rep("Absolute Position",50),
rep("Orientation of Feature",50),
rep("Orientation of Object",50)), # the four conditions in the data
z.sex = rep(0,200),
z.trial = rep(0,200))
# summarize the data to include them in the plot later on
d2 <- S2.bayes.data%>%
group_by(subid, aged, condition)%>%
summarise(mean = mean(correct))
f2 <- fitted(S2.full.bm,
newdata = nd2,
re_formula = NA) %>%
# this tells the function to ignore the random effects - in theory, we could generate predictions for specific individuals
as_tibble() %>%
bind_cols(nd2)%>%
mutate(age = z.age + mean(rep.S2.bayes.data$ageinyears)) # convert age back to the original scale by adding the mean of the data
# summarize the data to include them in the plot later on
d2 <- S2.bayes.data%>%
group_by(subid, ageinyears, condition)%>%
summarise(mean = mean(correct))
d2 <- rep.S2.bayes.data%>%
group_by(subid, ageinyears, condition)%>%
summarise(mean = mean(correct))
p2 <- f2 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
p2 <- f2 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d2, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f2, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p2, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p2, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p2, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
#
# ggplot()+
#   geom_hline(yintercept = .5, lty = 2, alpha = .75)+
#   geom_point(data = d2, aes(x = aged/365, y = mean, col = condition), alpha = .5, shape = 1)+
#   geom_smooth(data = f2, aes(x = age/365, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
#               stat = "identity", alpha = .25)+
#   geom_point(data=p2, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
#   geom_text(data=p2, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#   geom_text(data=p2, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
#   theme_minimal()+
#   scale_color_ptol(name = "condition")+
#   scale_fill_ptol(name = "condition")+
#   facet_grid(~condition)+
#   labs(x = "Age", y="Proportion correct")+
#   ylim(0,1)+
#   xlim(3,7)+
#   theme(legend.position = "bottom")
#
# S2_plot <- ggplot()+
#   geom_hline(yintercept = .5, lty = 2, alpha = .75)+
#   geom_point(data = d2, aes(x = aged/365, y = mean, col = condition), alpha = .5, shape = 1)+
#   geom_smooth(data = f2, aes(x = age/365, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition), stat = "identity", alpha = .4)+
#  # geom_vline(xintercept = round(f1$Q2.5=0.5), colour = "black", size = .5, alpha = .4) +
#   theme_minimal()+
#   scale_color_ptol(name = "condition")+
#   scale_fill_ptol(name = "condition")+
#   facet_grid(~condition)+
#   labs(x = "Age", y="Proportion Correct")+
#   ylim(0,1)+
#   xlim(3,7)+
#   theme(legend.position = "bottom")
# S2_plot
p2 <- f2 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d2, aes(x = aged/365, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f2, aes(x = age/365, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p2, aes(x = days/364.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p2, aes(label = months, x = days/364.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p2, aes(label = "months", x = days/364.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
p2 <- f2 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d2, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f2, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p2, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p2, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p2, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
# prepare data
rep.S3.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study3") %>% # in study3
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/356.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
# preregistered: correct ~ task*z.age +z.trial +z.sex +(z.trial|id)
S3.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data= rep.S3.bayes.data,
family=bernoulli(),
chains = 4,
iter= 2000,
cores= 4)
S3.full.bm <- add_criterion(S1.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S3.full.bm, "../models/S3.full.bm.rds")
table(rep.S3.bayes.data$condition)
# Saving the model (to not rerun it every time)
saveRDS(S3.full.bm, "../models/S3.full.bm.rds")
# load model from saving rds
S3.full.bm <- readRDS("../models/S3.full.bm.rds")
nd3 <- tibble(z.age = rep(seq(from = min(rep.S3.bayes.data$z.age),
to = max(rep.S3.bayes.data$z.age),
length.out = 50),4),
condition = c(rep("Number of Object",50),
rep("Number of Feature",50),
rep("Size of Object",50),
rep("Size of Feature",50)),
z.sex = rep(0,200),
z.trial = rep(0,200))
f3 <- fitted(S3.full.bm,
newdata = nd3,
re_formula = NA) %>%
as_tibble() %>%
bind_cols(nd3)%>%
mutate(age = z.age + mean(rep.S3.bayes.data$ageinyears))
f3 <- fitted(rep.S3.full.bm,
newdata = nd3,
re_formula = NA) %>%
as_tibble() %>%
bind_cols(nd3)%>%
mutate(age = z.age + mean(rep.S3.bayes.data$ageinyears))
# load model from saving rds
S3.full.bm <- readRDS("../models/S3.full.bm.rds")
nd3 <- tibble(z.age = rep(seq(from = min(rep.S3.bayes.data$z.age),
to = max(rep.S3.bayes.data$z.age),
length.out = 50),4),
condition = c(rep("Number of Object",50),
rep("Number of Feature",50),
rep("Size of Object",50),
rep("Size of Feature",50)),
z.sex = rep(0,200),
z.trial = rep(0,200))
f3 <- fitted(S3.full.bm,
newdata = nd3,
re_formula = NA) %>%
as_tibble() %>%
bind_cols(nd3)%>%
mutate(age = z.age + mean(rep.S3.bayes.data$ageinyears))
S3.full.bm <- add_criterion(S3.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S3.full.bm, "../models/S3.full.bm.rds")
# load model from saving rds
S3.full.bm <- readRDS("../models/S3.full.bm.rds")
nd3 <- tibble(z.age = rep(seq(from = min(rep.S3.bayes.data$z.age),
to = max(rep.S3.bayes.data$z.age),
length.out = 50),4),
condition = c(rep("Number of Object",50),
rep("Number of Feature",50),
rep("Size of Object",50),
rep("Size of Feature",50)),
z.sex = rep(0,200),
z.trial = rep(0,200))
f3 <- fitted(S3.full.bm,
newdata = nd3,
re_formula = NA) %>%
as_tibble() %>%
bind_cols(nd3)%>%
mutate(age = z.age + mean(rep.S3.bayes.data$ageinyears))
S3.full.bm <- add_criterion(S3.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S3.full.bm, "../models/S3.full.bm.rds")
# load model from saving rds
S3.full.bm <- readRDS("../models/S3.full.bm.rds")
nd3 <- tibble(z.age = rep(seq(from = min(rep.S3.bayes.data$z.age),
to = max(rep.S3.bayes.data$z.age),
length.out = 50),4),
condition = c(rep("Number of Object",50),
rep("Number of Feature",50),
rep("Size of Object",50),
rep("Size of Feature",50)),
z.sex = rep(0,200),
z.trial = rep(0,200))
f3 <- fitted(S3.full.bm,
newdata = nd3,
re_formula = NA) %>%
as_tibble() %>%
bind_cols(nd3)%>%
mutate(age = z.age + mean(rep.S3.bayes.data$ageinyears))
# prepare data
rep.S3.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study3") %>% # in study3
filter(trial != "fam") %>%
select(condition, subid, sex, aged, correct, trial) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/356.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex)))
# preregistered: correct ~ task*z.age +z.trial +z.sex +(z.trial|id)
S3.full.bm<-brm(correct~condition*z.age+z.trial+z.sex+(z.trial|subid),
data= rep.S3.bayes.data,
family=bernoulli(),
chains = 4,
iter= 2000,
cores= 4)
S3.full.bm <- add_criterion(S3.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S3.full.bm, "../models/S3.full.bm.rds")
S3.full.bm <- add_criterion(S3.full.bm, c("loo", "waic"))
# Saving the model (to not rerun it every time)
saveRDS(S3.full.bm, "../models/S3.full.bm.rds")
# load model from saving rds
S3.full.bm <- readRDS("../models/S3.full.bm.rds")
nd3 <- tibble(z.age = rep(seq(from = min(rep.S3.bayes.data$z.age),
to = max(rep.S3.bayes.data$z.age),
length.out = 50),4),
condition = c(rep("Number of Object",50),
rep("Number of Feature",50),
rep("Size of Object",50),
rep("Size of Feature",50)),
z.sex = rep(0,200),
z.trial = rep(0,200))
f3 <- fitted(S3.full.bm,
newdata = nd3,
re_formula = NA) %>%
as_tibble() %>%
bind_cols(nd3)%>%
mutate(age = z.age + mean(rep.S3.bayes.data$ageinyears))
# summarize the data to include them in the plot later on
d3 <- rep.S3.bayes.data%>%
group_by(subid, ageinyears, condition)%>%
summarise(mean = mean(correct))
p3 <- f3 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months"))
)
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d3, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f3, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p3, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p3, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p3, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
#facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
p3 <- f3 %>%
mutate(age = age * 365.25)%>%
group_by(condition)%>%
summarise(
Q2.5_closest_to.5 = Q2.5[which.min(abs(Q2.5-.5))],
estimate_closest_to.5 = Estimate[which.min(abs(Q2.5-.5))],
days = age[which.min(abs(Q2.5-.5))],
months = round(days/30.5),
years = round(days/365.25, 2),
monthlabels = as.character(paste(months, "months")))
ggplot()+
geom_hline(yintercept = .5, lty = 2, alpha = .75)+
geom_point(data = d3, aes(x = ageinyears, y = mean, col = condition), alpha = .5, shape = 1)+
geom_smooth(data = f3, aes(x = age, y = Estimate, ymin = Q2.5, ymax = Q97.5, fill =condition, col = condition),
stat = "identity", alpha = .25)+
geom_point(data=p3, aes(x = days/365.25, y = .5, fill = condition, col = condition), stat = "identity", size=3)+
geom_text(data=p3, aes(label = months, x = days/365.25, y = .24, fill = condition, col = condition), angle=90, size = 4, parse=T)+
geom_text(data=p3, aes(label = "months", x = days/365.25, y = .38, fill = condition, col = condition), angle=90, size = 4, parse=T)+
theme_minimal()+
scale_color_ptol(name = "condition")+
scale_fill_ptol(name = "condition")+
facet_grid(~condition)+
labs(x = "Age", y="Proportion correct")+
ylim(0,1)+
xlim(3,7)+
theme(legend.position = "bottom")
