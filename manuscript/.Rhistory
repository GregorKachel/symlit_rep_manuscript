female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
fail_in_fam = length(subid[drop == "fail_in_fam"]),
quit_early = length(subid[drop == "quit_early"]),
fussy_child = length(subid[drop == "fussy_child"]),
language = length(subid[drop == "language"]),
technical = length(subid[drop == "technical"]))
rep.drop.table.data <- data.frame(rep.drop.table.data, row.names = "study")
# Count trials by conditions
rep.s1.trials <- rep.S1.bayes.data %>%
group_by(condition) %>%
summarize(
Trials = n(),
N = n_distinct(subid))
rep.s2.trials <- rep.S2.bayes.data %>%
group_by(condition) %>%
summarize(
Trials = n(),
N = n_distinct(subid))
rep.s3.trials <- rep.S3.bayes.data %>%
group_by(condition) %>%
summarize(
Trials = n(),
N = n_distinct(subid))
age.plot.data <- rep.data %>% #select data
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop")  %>%
mutate(sex = as.factor(sex))  %>%
mutate(sex = fct_recode(sex, "female" = "0","male"="1")) %>%
rename(Sex = sex) %>%
mutate(study = case_when(
study == "study1" ~ "Study 1",
study == "study2" ~ "Study 2",
study == "study3" ~ "Study 3",
TRUE ~ NA_character_))
age.plot <- ggplot(age.plot.data, aes(x = agem, fill = Sex)) +
geom_dotplot(stackgroups = TRUE, binwidth = 1, binpositions = "all") +
coord_fixed(ratio = 4, xlim = c(36, 84), ylim = c(0, 1.01)) +  # combine here
theme_bw() +
scale_x_continuous(name = "Age in Months", breaks = seq(36, 84, 12), minor_breaks = seq(36, 84, 1)) +
scale_y_continuous(name = "Participants", breaks = NULL) +
facet_wrap(~ study, ncol = 1) +
labs(fill = NULL) +
guides(fill = guide_legend(ncol =2, byrow = TRUE)) +
theme_minimal() +
theme(
base_size = 13,
panel.grid.minor.x = element_line(linewidth = 0.25, linetype = 2),
panel.grid.major.x = element_line(linewidth = 1, linetype = 1),
panel.border = element_rect(colour = "grey30", fill = NA, linewidth = 1),
strip.background = element_rect(colour = "grey30", size = 1),
strip.text = element_text(face = "bold", size = rel(.9),
margin = margin(t = 5, b = 8)),
axis.title = element_text(face = "bold", size = rel(.9)),
axis.text = element_text(size = rel(0.8)),
legend.position = c(1, -0.06),
legend.justification = c(1, 1),
legend.text = element_text(size = rel(.9)),
panel.grid.minor = element_blank()
)
ggsave(
filename = "../illustrations/plot_supp_participants_S123.png",
plot = age.plot,
device = "png",
width = 9.5, height = 6,
dpi = 300,
units = "in",
bg = "white")
#
# # display plot
# img <- image_read("../illustrations/plot_participants_S123.png")
#
# windows(width = 15, height = 10)  # On Windows
# plot(img)
drop.plot.data <- rep.data %>% #select data
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid == "drop") %>%
mutate(study = case_when(
study == "study1" ~ "Study 1",
study == "study2" ~ "Study 2",
study == "study3" ~ "Study 3",
TRUE ~ NA_character_)) %>%
mutate(drop = case_when(
drop == "fail_in_fam" ~ "< 75% Correct in Familiarization",
drop == "fussy_child" ~ "Fussy Child",
drop == "language" ~ "Low Language Proficiency",
drop == "quit_early" ~ "Quit Early",
drop == "technical" ~ "Technical Problem",
TRUE ~ NA_character_)) %>%
mutate(drop = factor(drop, levels = c(
"< 75% Correct in Familiarization",
"Quit Early",
"Fussy Child",
"Low Language Proficiency",
"Technical Problem")))
drop.plot <- ggplot(drop.plot.data, aes(x = agem, fill = drop)) +
geom_dotplot(stackgroups = TRUE, binwidth = 1, binpositions = "all") +
theme_bw() +
scale_x_continuous(name = "Age in Months", breaks = seq(36, 84, 12), minor_breaks = seq(36, 84, 1)) +
scale_y_continuous(name = "Exclusions", breaks = NULL) +
coord_fixed(ratio = 4, xlim = c(36, 84), ylim = c(0, 1.5)) +
facet_wrap(~ study, ncol = 1) +
labs(fill = NULL) +
guides(fill = guide_legend(ncol = 5, byrow = TRUE)) +
theme_minimal(base_size = 13) +
theme(
panel.grid.minor.x = element_line(linewidth = 0.25, linetype = 2),
panel.grid.major.x = element_line(linewidth = 1, linetype = 1),
panel.border = element_rect(colour = "grey30", fill = NA, linewidth = 1),
strip.background = element_rect(colour = "grey30", size = 1),
strip.text = element_text(face = "bold", size = rel(.9),
margin = margin(t = 5, b = 8)),
axis.title = element_text(face = "bold", size = rel(.9)),
axis.text = element_text(size = rel(0.8)),
legend.position = "bottom",
legend.justification = c(1, 1),
legend.text = element_text(size = rel(.9)),
legend.margin = margin(t = 2),
plot.margin = margin(10, 10, 10, 10),
panel.grid.minor = element_blank()
)
ggsave(
filename = "../illustrations/plot_supp_exclusions_S123.png",
plot = drop.plot,
device = "png",
width = 9.5, height = 6,
dpi = 300,
units = "in",
bg = "white")
# # display plot
# img <- image_read("../illustrations/plot_supp_exclusions_S123.png")
#
# windows(width = 15, height = 10)  # On Windows
# plot(img)
library("papaja")
r_refs("library.bib")
# Loading packages
# NOTE: this will install these packages in case they are missing
# General
if (!require(tidyverse)) install.packages('tidyverse'); library(tidyverse)
if (!require(lsr)) install.packages('lsr'); library(lsr) # Analysis, Cohen's D
if (!require(ggthemes)) install.packages('ggthemes'); library(ggthemes) # for tufte boxplots
# if (!require(kableExtra)) install.packages('kableExtra'); library(kableExtra)
library(cowplot)
library(magick)
# Styling library(flextable)
if (!require(flextable)) install.packages('flextable'); library(flextable)
# bayes packages
if (!require(brms)) install.packages('brms'); library(brms) #
if (!require(tidybayes)) install.packages('tidybayes'); library(tidybayes) #
if (!require(HDInterval)) install.packages('HDInterval'); library(HDInterval) #
if (!require(posterior)) install.packages('posterior'); library(posterior) #
# basic analyses
if (!require(scales)) install.packages('scales'); library(scales) #
# plotting
## ggplot via tidyverse
if (!require(cowplot)) install.packages('cowplot'); library(cowplot) #
if (!require(png)) install.packages('png'); library(png) #
if (!require(grid)) install.packages('grid'); library(grid) #
# Troubleshooting Knitting Document
# might be required for knitting manuscript
# install.packages('tinytex')
# tinytex::install_tinytex()
#
# tinytex::tlmgr_update()
# tinytex::reinstall_tinytex()
# Seed for random number generation
set.seed(42)
knitr::opts_chunk$set(cache.extra = knitr::rand_seed)
# Full data set including all participants (i.e. including dropped participants)
rep.data <- readRDS("../data/symlitrep_final_data.rds")
# test  <- rep.data %>%
#   #filter(valid != "drop") %>% # valid participants only
#   filter(trial != "fam") %>%
#   group_by(subid, agem) %>%
#   summarize(participants = n_distinct(subid),
#             trials = n())
# Study1
rep.S1.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study1") %>% # in study one
filter(trial != "fam") %>%
select(condition, subid, sex, aged, agey, agem, correct, trial, rt, cue) %>%
mutate(condition = factor(condition, levels = c(
"Representation", # first level becomes reference
"Pars Pro Toto",
"Simple Form Analogy",
"Complex Form Analogy"))) %>%
mutate(sex = factor(sex, levels = c(
"0", # first level becomes reference
"1"))) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/365.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex))) %>%
mutate(item = gsub("_A.png", "", cue)) %>%
mutate(item = gsub("_B.png", "", item))
# Study2
rep.S2.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study2") %>% # in study two
filter(trial != "fam") %>%
select(condition, subid, sex, aged, agey, agem, correct, trial, rt, cue) %>%
mutate(condition = factor(condition, levels = c(
"Absolute Position", # first level becomes reference
"Relative Position",
"Orientation of Object",
"Orientation of Feature"))) %>%
mutate(sex = factor(sex, levels = c(
"0", # first level becomes reference
"1"))) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/365.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex))) %>%
mutate(item = gsub("_A.png", "", cue)) %>%
mutate(item = gsub("_B.png", "", item))
# Study 3
rep.S3.bayes.data  <- rep.data %>%
filter(valid != "drop") %>% # valid participants only
filter(study == "study3") %>% # in study two
filter(trial != "fam") %>%
select(condition, subid, sex, aged, agey, agem, correct, trial, rt, cue) %>%
mutate(condition = factor(condition, levels = c(
"Size of Object", # first level becomes reference
"Size of Feature",
"Number of Object",
"Number of Feature"))) %>%
mutate(sex = factor(sex, levels = c(
"0", # first level becomes reference
"1"))) %>%
mutate(z.trial = scale(as.numeric(trial)),
ageinyears = aged/365.25,
z.age = ageinyears - mean(ageinyears),
z.sex = scale(as.numeric(sex))) %>%
mutate(item = gsub("_A.png", "", cue)) %>%
mutate(item = gsub("_B.png", "", item))
# test <- rep.data %>%
#   filter(valid != "drop") %>%
#   group_by(study) %>%
#   summarize(min_Age = min(agem))
# test <- rep.data %>%
#   filter(valid != "drop") %>%
#   group_by(study, condition) %>%
#   summarize(N = length(subid))
#
add_colour <- function(df) {
df %>%
mutate(colour = case_when(
condition == "Representation" ~ "#00441b",
condition == "Pars Pro Toto" ~ "#238b45",
condition == "Simple Form Analogy" ~ "#cc4c02",
condition == "Complex Form Analogy" ~ "#ff9609",
condition == "Absolute Position" ~ "#084081",
condition == "Relative Position" ~ "#2b8cbe",
condition == "Orientation of Object" ~ "#7B3F00",
condition == "Orientation of Feature" ~ "#B55239",
condition == "Size of Object" ~ "#2E004F",
condition == "Size of Feature" ~ "#9370DB",
condition == "Number of Object" ~ "#67000d",
condition == "Number of Feature" ~ "#cb181d",
TRUE ~ NA_character_
))
}
# condition_colours_df <- data.frame(
#   condition = c(
#     # study1
#     "Representation",
#     "Pars Pro Toto",
#     "Simple Form Analogy",
#     "Complex Form Analogy",
#     # study 2
#     "Absolute Position",
#     "Relative Position",
#     "Orientation of Object",
#     "Orientation of Feature",
#     # study3
#     "Size of Object",
#     "Size of Feature",
#     "Number of Object",
#     "Number of Feature"),
#   colour = c(
#     # study1
#     "#006400", "#79e000", "#ff9609", "#ffc512",
#     # study2
#     "#4B0082", "#6A5ACD", "#8B0000", "#A0522D",
#     # study3
#     "#191970", "#008080", "#800080", "#8B008B"
#   ),
#   stringsAsFactors = F
# )
#
# # Function to add colour using left_join
# add_colour <- function(df) {
#   df %>%
#     left_join(condition_colours_df, by = "condition")
# }
# condition_colours <- c(
#   "Representation" = "#006400",  # Dark Green
#   "Pars Pro Toto" = "#79e000",    # Forest Green
#   "Simple Form Analogy" = "#ff9609",
#   "Complex Form Analogy" = "#ffc512",
#   "Absolute Position" = "#4B0082",    # Indigo (dark purple)
#   "Relative Position" = "#6A5ACD",    # Slate Blue
#   "Orientation of Object" = "#8B0000", # Dark Red
#   "Orientation of Feature" = "#A0522D", # Sienna (dark orange-brown)
#   "Size of Object" = "#191970",        # Midnight Blue
#   "Size of Feature" = "#008080",       # Teal
#   "Number of Object" = "#800080",      # Purple
#   "Number of Feature" = "#8B008B"       # Dark Magenta
# )
rep.age.table.data  <- rep.data %>%
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop") %>%  # filter out dropped participants
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
SD = round(sd(agem), 2),
N_daycare = length(subid[where == "daycare"]),
N_lab = length(subid[where == "lab"]),
N_home = length(subid[where == "home"]),
N_hort = length(subid[where == "afterschoolcenter"]))
rep.age.table.data <- data.frame(rep.age.table.data, row.names = "study")
rep.drop.table.data  <- rep.data %>%
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid == "drop") %>%
group_by(study) %>%
summarize(
N = length(subid),
female = sum(sex=="0"),
Mean = mean(agem),
Min = min(agem),
Max = max(agem),
fail_in_fam = length(subid[drop == "fail_in_fam"]),
quit_early = length(subid[drop == "quit_early"]),
fussy_child = length(subid[drop == "fussy_child"]),
language = length(subid[drop == "language"]),
technical = length(subid[drop == "technical"]))
rep.drop.table.data <- data.frame(rep.drop.table.data, row.names = "study")
# Count trials by conditions
rep.s1.trials <- rep.S1.bayes.data %>%
group_by(condition) %>%
summarize(
Trials = n(),
N = n_distinct(subid))
rep.s2.trials <- rep.S2.bayes.data %>%
group_by(condition) %>%
summarize(
Trials = n(),
N = n_distinct(subid))
rep.s3.trials <- rep.S3.bayes.data %>%
group_by(condition) %>%
summarize(
Trials = n(),
N = n_distinct(subid))
age.plot.data <- rep.data %>% #select data
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid != "drop")  %>%
mutate(sex = as.factor(sex))  %>%
mutate(sex = fct_recode(sex, "female" = "0","male"="1")) %>%
rename(Sex = sex) %>%
mutate(study = case_when(
study == "study1" ~ "Study 1",
study == "study2" ~ "Study 2",
study == "study3" ~ "Study 3",
TRUE ~ NA_character_))
age.plot <- ggplot(age.plot.data, aes(x = agem, fill = Sex)) +
geom_dotplot(stackgroups = TRUE, binwidth = 1, binpositions = "all") +
coord_fixed(ratio = 4, xlim = c(36, 84), ylim = c(0, 1.01)) +  # combine here
theme_bw() +
scale_x_continuous(name = "Age in Months", breaks = seq(36, 84, 12), minor_breaks = seq(36, 84, 1)) +
scale_y_continuous(name = "Participants", breaks = NULL) +
facet_wrap(~ study, ncol = 1) +
labs(fill = NULL) +
guides(fill = guide_legend(ncol =2, byrow = TRUE)) +
theme_minimal() +
theme(
base_size = 13,
panel.grid.minor.x = element_line(linewidth = 0.25, linetype = 2),
panel.grid.major.x = element_line(linewidth = 1, linetype = 1),
panel.border = element_rect(colour = "grey30", fill = NA, linewidth = 1),
strip.background = element_rect(colour = "grey30", size = 1),
strip.text = element_text(face = "bold", size = rel(.9),
margin = margin(t = 5, b = 8)),
axis.title = element_text(face = "bold", size = rel(.9)),
axis.text = element_text(size = rel(0.8)),
legend.position = c(1, -0.06),
legend.justification = c(1, 1),
legend.text = element_text(size = rel(.9)),
panel.grid.minor = element_blank()
)
ggsave(
filename = "../illustrations/plot_supp_participants_S123.png",
plot = age.plot,
device = "png",
width = 9.5, height = 6,
dpi = 300,
units = "in",
bg = "white")
#
# # display plot
# img <- image_read("../illustrations/plot_participants_S123.png")
#
# windows(width = 15, height = 10)  # On Windows
# plot(img)
drop.plot.data <- rep.data %>% #select data
distinct(subid, .keep_all = TRUE) %>% # select only one line per participant
filter(valid == "drop") %>%
mutate(study = case_when(
study == "study1" ~ "Study 1",
study == "study2" ~ "Study 2",
study == "study3" ~ "Study 3",
TRUE ~ NA_character_)) %>%
mutate(drop = case_when(
drop == "fail_in_fam" ~ "< 75% Correct in Familiarization",
drop == "fussy_child" ~ "Fussy Child",
drop == "language" ~ "Low Language Proficiency",
drop == "quit_early" ~ "Quit Early",
drop == "technical" ~ "Technical Problem",
TRUE ~ NA_character_)) %>%
mutate(drop = factor(drop, levels = c(
"< 75% Correct in Familiarization",
"Quit Early",
"Fussy Child",
"Low Language Proficiency",
"Technical Problem")))
drop.plot <- ggplot(drop.plot.data, aes(x = agem, fill = drop)) +
geom_dotplot(stackgroups = TRUE, binwidth = 1, binpositions = "all") +
theme_bw() +
scale_x_continuous(name = "Age in Months", breaks = seq(36, 84, 12), minor_breaks = seq(36, 84, 1)) +
scale_y_continuous(name = "Exclusions", breaks = NULL) +
coord_fixed(ratio = 4, xlim = c(36, 84), ylim = c(0, 1.5)) +
facet_wrap(~ study, ncol = 1) +
labs(fill = NULL) +
guides(fill = guide_legend(ncol = 5, byrow = TRUE)) +
theme_minimal(base_size = 13) +
theme(
panel.grid.minor.x = element_line(linewidth = 0.25, linetype = 2),
panel.grid.major.x = element_line(linewidth = 1, linetype = 1),
panel.border = element_rect(colour = "grey30", fill = NA, linewidth = 1),
strip.background = element_rect(colour = "grey30", size = 1),
strip.text = element_text(face = "bold", size = rel(.9),
margin = margin(t = 5, b = 8)),
axis.title = element_text(face = "bold", size = rel(.9)),
axis.text = element_text(size = rel(0.8)),
legend.position = "bottom",
legend.justification = c(1, 1),
legend.text = element_text(size = rel(.9)),
legend.margin = margin(t = 2),
plot.margin = margin(10, 10, 10, 10),
panel.grid.minor = element_blank()
)
ggsave(
filename = "../illustrations/plot_supp_exclusions_S123.png",
plot = drop.plot,
device = "png",
width = 9.5, height = 6,
dpi = 300,
units = "in",
bg = "white")
# # display plot
# img <- image_read("../illustrations/plot_supp_exclusions_S123.png")
#
# windows(width = 15, height = 10)  # On Windows
# plot(img)
S2.full.bm<-brm(correct~condition*z.age+z.trial+sex+(z.trial|subid),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S2.full.bm <- add_criterion(S2.full.bm, c("loo", "waic"))
S2.null.bm<-brm(correct~condition+z.age+z.trial+sex+(z.trial|subid),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S2.null.bm<-brm(correct~condition+z.age+z.trial+sex+(z.trial|subid),
data= rep.S2.bayes.data,
family=bernoulli(),
chains = 4,
iter= 5000,
cores= 4)
S2.null.bm <- add_criterion(S2.null.bm, c("loo", "waic"))
saveRDS(S2.full.bm, "../models/S2.full.bm.rds")
saveRDS(S2.null.bm, "../models/S2.null.bm.rds")
### MODEL COMPARISON
S2.comp <- loo_compare(S2.null.bm, S2.full.bm, criterion = "waic")%>%as_tibble(rownames = "index")
S2.comp <- data.frame(S2.comp, row.names = "index")
S2.weights <- model_weights(S2.null.bm, S2.full.bm, criterion = "waic")
View(S2.comp)
S2.weights <- model_weights(S2.null.bm, S2.full.bm, criterion = "waic")
S2.weights <- S2.weights %>% as_tibble(rownames = "index")
S2.weights <- data.frame(S2.weights, row.names = "index")
saveRDS(S2.comp, "../models/S2.comp.rds")
saveRDS(S2.weights, "../models/S2.weights.rds")
View(S2.weights)
### LOO COMPARISON
### not reported, essentially identical
S2.null.loo <- loo(S2.null.bm)
S2.full.loo <- loo(S2.full.bm)
S2.loo.comp <- loo_compare(S2.null.loo, S2.full.loo) %>%
as_tibble(rownames = "model")
S2.loo.comp
View(S2.loo.comp)
